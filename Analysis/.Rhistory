library(usethis)
install.packages("usethis")
install.packages("gitcreds")
install.packages("https://github.com/edeegannps/FFIqaqc")
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(stringr)
library(outliers)
library(EnvStats)
library(tidyverse)
library(miniUI)
library(bslib)
library(dplyr)
library(knitr)
library(DT)
library(xtable)
library(openxlsx)
rm(list = ls())
#knitr::opts_knit$set(root.dir="C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/tmp")
setwd("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/")
mtype="PSME"
source("C:/Users/edeegan/OneDrive - DOI/FFIqaqc/R/datacleaningfunctions.R")
samp=read.csv("PSME_data/SAGU_SampleEventReport.csv")
setwd("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/")
mtype="PSME"
source("C:/Users/edeegan/OneDrive - DOI/FFIqaqc/R/datacleaningfunctions.R")
samp=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/SAGU_SampleEventReport.csv")
setwd("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/")
mtype="PSME"
source("C:/Users/edeegan/OneDrive - DOI/FFIqaqc/R/datacleaningfunctions.R")
samp=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/SAGU_SampleEventReport.csv")
cover=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Cover - Species Composition (metric)_XPT.csv", na.strings=c("","NA"))
fuel1000=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Surface Fuels - 1000Hr_XPT.csv", na.strings=c("","NA"))
duff=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Surface Fuels - Duff_Litter_XPT.csv", na.strings=c("","NA"))
fine=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Surface Fuels - Fine_XPT.csv", na.strings=c("","NA"))
saps=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Saplings (Diameter Class) (metric)_XPT.csv", na.strings=c("","NA"))
seeds=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Seedlings (Height Class) (metric)_XPT.csv")
tree=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Individuals (metric)_XPT.csv")
flags=c()
tree=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Individuals (metric)_XPT.csv")
##check that correct subplot fraction is entered for trees
#classify dbh
pole=tree[which(tree$DBH<15.1),]
pole$treerow=which(tree$DBH<15.1)
overstory=tree[which(tree$DBH>=15.1),]
overstory$treerow=which(tree$DBH>=15.1)
blank=tree[which(tree$DBH=="" | is.na(tree$DBH)),]
blank$treerow=which(tree$DBH=="" | is.na(tree$DBH))
flags=c()
cat("All pole trees have subplot fraction of 0.25\n")
if(length(unique(pole$SubFrac))==1){
if(unique(pole$SubFrac)==0.25){
cat("TRUE\n")
cat("\n")
}else{
wrongsubfract=unique(pole[which(pole$SubFrac!=0.25), "SubFrac"])
cat(paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
}
}else{
#more than one result not just one
wrongsubfract=unique(pole[which(pole$SubFrac!=0.25), "SubFrac"])
cat(paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"]), "\n", collapse=" ")
}
flags
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"]))
flags
tree=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Individuals (metric)_XPT.csv")
##check that correct subplot fraction is entered for trees
#classify dbh
pole=tree[which(tree$DBH<15.1),]
pole$treerow=which(tree$DBH<15.1)
overstory=tree[which(tree$DBH>=15.1),]
overstory$treerow=which(tree$DBH>=15.1)
blank=tree[which(tree$DBH=="" | is.na(tree$DBH)),]
blank$treerow=which(tree$DBH=="" | is.na(tree$DBH))
flags=c()
cat("All pole trees have subplot fraction of 0.25\n")
if(length(unique(pole$SubFrac))==1){
if(unique(pole$SubFrac)==0.25){
cat("TRUE\n")
cat("\n")
}else{
wrongsubfract=unique(pole[which(pole$SubFrac!=0.25), "SubFrac"])
cat(paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"]))
}
}else{
#more than one result not just one
wrongsubfract=unique(pole[which(pole$SubFrac!=0.25), "SubFrac"])
cat(paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"]))
}
cat("All blank dbh trees have subplot fraction of 1000 or blank\n")
if(length(unique(na.omit(blank$SubFrac)))==1){
if(unique(na.omit(blank$SubFrac))==1000){
cat("TRUE\n")
cat("\n")
}else{
wrongsubfract=unique(na.omit(blank$SubFrac))
wrongsubfract=wrongsubfract[! wrongsubfract==1000]
cat(paste("FALSE, subfrac values for blank dbh trees include", wrongsubfract, "when it should be equal to 1000. Problem events are:", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "MacroPlot.Name"],
blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "Monitoring.Status"],"tree",blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for blank trees include", wrongsubfract, "when it should be equal to 1000. Problem events are:", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "MacroPlot.Name"],
blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "Monitoring.Status"], "tree", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "TagNo"]))
}
}else{
#more than one result not just one
wrongsubfract=unique(na.omit(blank$SubFrac))
wrongsubfract=wrongsubfract[! wrongsubfract==1000]
cat(paste("FALSE, subfrac values for blank dbh trees include", wrongsubfract, "when it should be equal to 1000. Problem events are:", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "MacroPlot.Name"],
blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "Monitoring.Status"],"tree",blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for blank trees include", wrongsubfract, "when it should be equal to 1000. Problem events are:", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "MacroPlot.Name"],
blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "Monitoring.Status"], "tree", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "TagNo"]))
}
cat("All overstory trees have subplot fraction of 1\n")
if(length(unique(overstory$SubFrac))==1){
if(unique(overstory$SubFrac)==1){
cat("TRUE\n")
cat("\n")
}else{
wrongsubfract=unique(overstory[which(overstory$SubFrac!=1), "SubFrac"])
cat(paste("FALSE, subfrac values for overstory trees include", wrongsubfract, "when it should be equal to 1. Problem events are:", overstory[which(overstory$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
overstory[which(overstory$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",overstory[which(overstory$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for overstory trees include", wrongsubfract, "when it should be equal to 1. Problem events are:", overstory[which(overstory$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
overstory[which(overstory$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", overstory[which(overstory$SubFrac %in% wrongsubfract), "TagNo"]))
}
}else{
#more than one result not just one
wrongsubfract=unique(overstory[which(overstory$SubFrac!=1), "SubFrac"])
cat(paste("FALSE, subfrac values for overstory trees include", wrongsubfract, "when it should be equal to 1. Problem events are:", overstory[which(overstory$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
overstory[which(overstory$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",overstory[which(overstory$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for overstory trees include", wrongsubfract, "when it should be equal to 1. Problem events are:", overstory[which(overstory$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
overstory[which(overstory$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", overstory[which(overstory$SubFrac %in% wrongsubfract), "TagNo"]))
}
#blank list
mtype="PSME"
samp=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/SAGU_SampleEventReport.csv")
plots=unique(samp[which(samp$ProjectUnit_Name == mtype), "MacroPlot_Name"])
df_flags <- data.frame(matrix(ncol = length(plots), nrow = 0))
colnames(df_flags)=plots
for(i in 1:length(flags)){
for(x in 1:length(plots)){
if(grepl(plots[x], flags[i])){
df_flags[nrow(df_flags)+1, x]=flags[i]
}else{
#nothing
}
}
}
data = list()
for(p in 1:ncol(df_flags)){
col=na.omit(df_flags[,p])
x1=as.data.frame(col)
data[p]=x1
#cat(colnames(df_flags[p]))
#cat("\n")
#cat("\n")
#cat("\n")
#cat("\n")
#cat(paste(col, "\n"), sep="\n")
}
for(t in 1:(length(plots))){
data[[t]]=as.data.frame(data[[t]])
colnames(data[[t]])="Issue"
data[[t]]$Resolved=rep(NA, nrow(data[[t]]))
data[[t]]$Resolved_by=rep(NA, nrow(data[[t]]))
data[[t]]$Action_need=rep(NA, nrow(data[[t]]))
data[[t]]$Other_notes=rep(NA, nrow(data[[t]]))
}
names(data)=c(plots)
library(openxlsx)
write.xlsx(
x=data,
file = paste("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/QAQC/PSMESubplotfractflags.xlsx"),
col_names = TRUE,
format_headers = TRUE,
use_zip64 = FALSE
)
blank[which(blank$SubFrac %in% wrongsubfract), "CrwnCl"]
setdiff(blank[which(blank$SubFrac %in% wrongsubfract), "CrwnCl"], c("BBD", "CUS", "DD"))
blank[which(blank$CrwnCl %in% setdiff(blank[which(blank$SubFrac %in% wrongsubfract), "CrwnCl"], c("BBD", "CUS", "DD"))),]
#load necessary packages
library(tidyverse)
library(dplyr)
library(stringr)
#clearing environment - fresh start!
rm(list = ls())
##SEEDLINGS
setwd("C:/Users/edeegan/OneDrive - DOI/FFIanalysis/Analysis/")
seeds=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Seedlings (Height Class) (metric)_XPT.csv")
unique(seeds$MicroPlotSize)
seeds=seeds %>%
mutate(MicroPlotSize = case_match(MicroPlotSize,
0.025~0.06177635,
0.005~0.01235527))
# Identify unique events and macroplots with missing MicroPlotSize values
events = unique(seeds[which(!is.na(seeds$MicroPlotSize)), c("MacroPlot.Name", "Monitoring.Status")])
samp=c()
# Iterate through each unique event-macroplot combination
for (i in 1:nrow(events)) {
# Find rows with the same event and macroplot as the current combination
samp = which(events[i,"MacroPlot.Name"]==seeds[,"MacroPlot.Name"] &
events[i,"Monitoring.Status"] == seeds[, "Monitoring.Status"])
# Replace missing MicroPlotSize values with values from non-missing rows within the same combination
seeds[samp[which(is.na(seeds[samp, "MicroPlotSize"]))], "MicroPlotSize"] = seeds[which(!is.na(seeds[samp, "MicroPlotSize"])), "MicroPlotSize"]
}
seeds=seeds[which(!is.na(seeds$Count)),]
#export from reports and analysis - compare and double check
# 0 v null watch out
#formatting date column
seeds$Date_format=as.Date(seeds$Date, format="%m/%d/%Y")
#creating new column for just year
seeds$Year=str_split_i(seeds$Date_format, "-", 1)
#combining 90s into one year
seeds[which(seeds$Year %in% c("1990", "1991", "1992")),"Year"]="1990"
#multiple by subplot fraction
seeds$Count=seeds$Count*seeds$SubFrac
seeds=seeds[-which(seeds$SizeClHt==0),]
seedlings_summary=seeds %>% group_by(Year, SizeClHt, MacroPlot.Name) %>% summarize(Count=sum(Count),
MicroPlotSize=sum(MicroPlotSize))
seedlings_summary$density=seedlings_summary$Count/seedlings_summary$MicroPlotSize
seedlings_summary$SizeClHt=as.character(seedlings_summary$SizeClHt)
all_classes=seedlings_summary %>%
group_by(Year, MacroPlot.Name) %>%
summarise(Count = sum(Count),
SizeClHt="Total",
MicroPlotSize=sum(MicroPlotSize),
density=Count/MicroPlotSize
)
seedlings_summary=rbind(seedlings_summary, all_classes)
#need to take avg of plot densities for each year
seedlings_plotdata=seedlings_summary%>%
group_by(Year, SizeClHt) %>%
summarize(density_mean=mean(density))
ggplot(seedlings_plotdata, aes(x=Year, y=density_mean,
group=as.factor(SizeClHt), fill=as.factor(SizeClHt)))+
geom_vline(xintercept="2004-01-01",linetype='dashed', color='red', size=0.5)+
theme_classic()+geom_area()+labs(title="Seedling Density (tree/acre) over time",
fill="Height Class")+
scale_color_viridis_d()+
facet_wrap(~SizeClHt)+ theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
###BY SPECIES
##SEEDLINGS
setwd("C:/Users/edeegan/OneDrive - DOI/FFIanalysis/Analysis/")
seeds=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Seedlings (Height Class) (metric)_XPT.csv")
unique(seeds$MicroPlotSize)
seeds=seeds %>%
mutate(MicroPlotSize = case_match(MicroPlotSize,
0.025~0.06177635,
0.005~0.01235527))
# Identify unique events and macroplots with missing MicroPlotSize values
events = unique(seeds[which(!is.na(seeds$MicroPlotSize)), c("MacroPlot.Name", "Monitoring.Status")])
samp=c()
# Iterate through each unique event-macroplot combination
for (i in 1:nrow(events)) {
# Find rows with the same event and macroplot as the current combination
samp = which(events[i,"MacroPlot.Name"]==seeds[,"MacroPlot.Name"] &
events[i,"Monitoring.Status"] == seeds[, "Monitoring.Status"])
# Replace missing MicroPlotSize values with values from non-missing rows within the same combination
seeds[samp[which(is.na(seeds[samp, "MicroPlotSize"]))], "MicroPlotSize"] = seeds[which(!is.na(seeds[samp, "MicroPlotSize"])), "MicroPlotSize"]
}
seeds=seeds[which(!is.na(seeds$Count)),]
#export from reports and analysis - compare and double check
# 0 v null watch out
#formatting date column
seeds$Date_format=as.Date(seeds$Date, format="%m/%d/%Y")
#creating new column for just year
seeds$Year=str_split_i(seeds$Date_format, "-", 1)
#combining 90s into one year
seeds[which(seeds$Year %in% c("1990", "1991", "1992")),"Year"]="1990"
#multiple by subplot fraction
seeds$Count=seeds$Count*seeds$SubFrac
seeds=seeds[-which(seeds$SizeClHt==0),]
seedlings_summary=seeds %>% group_by(Year, SizeClHt, MacroPlot.Name, Species.Symbol) %>% summarize(Count=sum(Count),
MicroPlotSize=sum(MicroPlotSize))
seedlings_summary$density=seedlings_summary$Count/seedlings_summary$MicroPlotSize
seedlings_summary$SizeClHt=as.character(seedlings_summary$SizeClHt)
all_classes=seedlings_summary %>%
group_by(Year, MacroPlot.Name, Species.Symbol) %>%
summarise(Count = sum(Count),
SizeClHt="Total",
MicroPlotSize=sum(MicroPlotSize),
density=Count/MicroPlotSize
)
seedlings_summary=rbind(seedlings_summary, all_classes)
#need to take avg of plot densities for each year
seedlings_plotdata=seedlings_summary%>%
group_by(Year, SizeClHt, Species.Symbol) %>%
summarize(density_mean=mean(density))
seedlings_plotdata=seedlings_plotdata %>%
mutate(Species.Symbol = recode(Species.Symbol,
'ABCO1' = 'White Fir',
'QUGA1' = 'Gambel Oak',
'PIPO1' = 'Ponderosa Pine',
'PIST1' = 'Southwestern White Pine',
'PSME1' = 'Douglas Fir',
'QUHY1' = 'Silverleaf Oak'))
##EDITS
#remove total
#cut 1997 and 2001
#add labels for years
#make sure title isn't cut off
seedlings_plotdata <- seedlings_plotdata[-which(seedlings_plotdata$SizeClHt=="Total"),]
seedlings_plotdata <- seedlings_plotdata[-which(seedlings_plotdata$Year %in% c("1990", "1997")),]
seedlings_plotdata <- seedlings_plotdata[-which(seedlings_plotdata$SizeClHt %in% c("0.15", "0.3")),]
ggplot(seedlings_plotdata, aes(x=SizeClHt, y=density_mean,
fill=as.factor(Species.Symbol)))+geom_bar(position='stack', stat='identity')+
facet_grid(rows=vars(Year))+
theme_classic()+labs(title="PSME Plots Seedling Density over time by species and size class",
fill="Species")+
scale_fill_brewer(palette = "PuOr")+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))+
ylab("Mean Density (tree/acre)")
ggsave("PSME_Finalized_Plots/seedlingdensity_byspecies.png", height=4, width=8)
