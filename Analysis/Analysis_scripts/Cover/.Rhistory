library(usethis)
install.packages("usethis")
install.packages("gitcreds")
install.packages("https://github.com/edeegannps/FFIqaqc")
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(stringr)
library(outliers)
library(EnvStats)
library(tidyverse)
library(miniUI)
library(bslib)
library(dplyr)
library(knitr)
library(DT)
library(xtable)
library(openxlsx)
rm(list = ls())
#knitr::opts_knit$set(root.dir="C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/tmp")
setwd("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/")
mtype="PSME"
source("C:/Users/edeegan/OneDrive - DOI/FFIqaqc/R/datacleaningfunctions.R")
samp=read.csv("PSME_data/SAGU_SampleEventReport.csv")
setwd("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/")
mtype="PSME"
source("C:/Users/edeegan/OneDrive - DOI/FFIqaqc/R/datacleaningfunctions.R")
samp=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/SAGU_SampleEventReport.csv")
setwd("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/")
mtype="PSME"
source("C:/Users/edeegan/OneDrive - DOI/FFIqaqc/R/datacleaningfunctions.R")
samp=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/SAGU_SampleEventReport.csv")
cover=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Cover - Species Composition (metric)_XPT.csv", na.strings=c("","NA"))
fuel1000=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Surface Fuels - 1000Hr_XPT.csv", na.strings=c("","NA"))
duff=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Surface Fuels - Duff_Litter_XPT.csv", na.strings=c("","NA"))
fine=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Surface Fuels - Fine_XPT.csv", na.strings=c("","NA"))
saps=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Saplings (Diameter Class) (metric)_XPT.csv", na.strings=c("","NA"))
seeds=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Seedlings (Height Class) (metric)_XPT.csv")
tree=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Individuals (metric)_XPT.csv")
flags=c()
tree=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Individuals (metric)_XPT.csv")
##check that correct subplot fraction is entered for trees
#classify dbh
pole=tree[which(tree$DBH<15.1),]
pole$treerow=which(tree$DBH<15.1)
overstory=tree[which(tree$DBH>=15.1),]
overstory$treerow=which(tree$DBH>=15.1)
blank=tree[which(tree$DBH=="" | is.na(tree$DBH)),]
blank$treerow=which(tree$DBH=="" | is.na(tree$DBH))
flags=c()
cat("All pole trees have subplot fraction of 0.25\n")
if(length(unique(pole$SubFrac))==1){
if(unique(pole$SubFrac)==0.25){
cat("TRUE\n")
cat("\n")
}else{
wrongsubfract=unique(pole[which(pole$SubFrac!=0.25), "SubFrac"])
cat(paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
}
}else{
#more than one result not just one
wrongsubfract=unique(pole[which(pole$SubFrac!=0.25), "SubFrac"])
cat(paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"]), "\n", collapse=" ")
}
flags
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"]))
flags
tree=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/PSME_Trees - Individuals (metric)_XPT.csv")
##check that correct subplot fraction is entered for trees
#classify dbh
pole=tree[which(tree$DBH<15.1),]
pole$treerow=which(tree$DBH<15.1)
overstory=tree[which(tree$DBH>=15.1),]
overstory$treerow=which(tree$DBH>=15.1)
blank=tree[which(tree$DBH=="" | is.na(tree$DBH)),]
blank$treerow=which(tree$DBH=="" | is.na(tree$DBH))
flags=c()
cat("All pole trees have subplot fraction of 0.25\n")
if(length(unique(pole$SubFrac))==1){
if(unique(pole$SubFrac)==0.25){
cat("TRUE\n")
cat("\n")
}else{
wrongsubfract=unique(pole[which(pole$SubFrac!=0.25), "SubFrac"])
cat(paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"]))
}
}else{
#more than one result not just one
wrongsubfract=unique(pole[which(pole$SubFrac!=0.25), "SubFrac"])
cat(paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for pole trees include", wrongsubfract, "when it should be equal to 0.25. Problem events are:", pole[which(pole$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
pole[which(pole$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", pole[which(pole$SubFrac %in% wrongsubfract), "TagNo"]))
}
cat("All blank dbh trees have subplot fraction of 1000 or blank\n")
if(length(unique(na.omit(blank$SubFrac)))==1){
if(unique(na.omit(blank$SubFrac))==1000){
cat("TRUE\n")
cat("\n")
}else{
wrongsubfract=unique(na.omit(blank$SubFrac))
wrongsubfract=wrongsubfract[! wrongsubfract==1000]
cat(paste("FALSE, subfrac values for blank dbh trees include", wrongsubfract, "when it should be equal to 1000. Problem events are:", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "MacroPlot.Name"],
blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "Monitoring.Status"],"tree",blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for blank trees include", wrongsubfract, "when it should be equal to 1000. Problem events are:", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "MacroPlot.Name"],
blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "Monitoring.Status"], "tree", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "TagNo"]))
}
}else{
#more than one result not just one
wrongsubfract=unique(na.omit(blank$SubFrac))
wrongsubfract=wrongsubfract[! wrongsubfract==1000]
cat(paste("FALSE, subfrac values for blank dbh trees include", wrongsubfract, "when it should be equal to 1000. Problem events are:", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "MacroPlot.Name"],
blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "Monitoring.Status"],"tree",blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for blank trees include", wrongsubfract, "when it should be equal to 1000. Problem events are:", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "MacroPlot.Name"],
blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "Monitoring.Status"], "tree", blank[which(na.omit(blank$SubFrac) %in% wrongsubfract), "TagNo"]))
}
cat("All overstory trees have subplot fraction of 1\n")
if(length(unique(overstory$SubFrac))==1){
if(unique(overstory$SubFrac)==1){
cat("TRUE\n")
cat("\n")
}else{
wrongsubfract=unique(overstory[which(overstory$SubFrac!=1), "SubFrac"])
cat(paste("FALSE, subfrac values for overstory trees include", wrongsubfract, "when it should be equal to 1. Problem events are:", overstory[which(overstory$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
overstory[which(overstory$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",overstory[which(overstory$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for overstory trees include", wrongsubfract, "when it should be equal to 1. Problem events are:", overstory[which(overstory$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
overstory[which(overstory$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", overstory[which(overstory$SubFrac %in% wrongsubfract), "TagNo"]))
}
}else{
#more than one result not just one
wrongsubfract=unique(overstory[which(overstory$SubFrac!=1), "SubFrac"])
cat(paste("FALSE, subfrac values for overstory trees include", wrongsubfract, "when it should be equal to 1. Problem events are:", overstory[which(overstory$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
overstory[which(overstory$SubFrac %in% wrongsubfract), "Monitoring.Status"],"tree",overstory[which(overstory$SubFrac %in% wrongsubfract), "TagNo"], "\n", collapse=" "))
cat("\n")
flags<-c(flags, paste("FALSE, subfrac values for overstory trees include", wrongsubfract, "when it should be equal to 1. Problem events are:", overstory[which(overstory$SubFrac %in% wrongsubfract), "MacroPlot.Name"],
overstory[which(overstory$SubFrac %in% wrongsubfract), "Monitoring.Status"], "tree", overstory[which(overstory$SubFrac %in% wrongsubfract), "TagNo"]))
}
#blank list
mtype="PSME"
samp=read.csv("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/SAGU_data/PSME/SAGU_SampleEventReport.csv")
plots=unique(samp[which(samp$ProjectUnit_Name == mtype), "MacroPlot_Name"])
df_flags <- data.frame(matrix(ncol = length(plots), nrow = 0))
colnames(df_flags)=plots
for(i in 1:length(flags)){
for(x in 1:length(plots)){
if(grepl(plots[x], flags[i])){
df_flags[nrow(df_flags)+1, x]=flags[i]
}else{
#nothing
}
}
}
data = list()
for(p in 1:ncol(df_flags)){
col=na.omit(df_flags[,p])
x1=as.data.frame(col)
data[p]=x1
#cat(colnames(df_flags[p]))
#cat("\n")
#cat("\n")
#cat("\n")
#cat("\n")
#cat(paste(col, "\n"), sep="\n")
}
for(t in 1:(length(plots))){
data[[t]]=as.data.frame(data[[t]])
colnames(data[[t]])="Issue"
data[[t]]$Resolved=rep(NA, nrow(data[[t]]))
data[[t]]$Resolved_by=rep(NA, nrow(data[[t]]))
data[[t]]$Action_need=rep(NA, nrow(data[[t]]))
data[[t]]$Other_notes=rep(NA, nrow(data[[t]]))
}
names(data)=c(plots)
library(openxlsx)
write.xlsx(
x=data,
file = paste("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/QAQC/PSMESubplotfractflags.xlsx"),
col_names = TRUE,
format_headers = TRUE,
use_zip64 = FALSE
)
blank[which(blank$SubFrac %in% wrongsubfract), "CrwnCl"]
setdiff(blank[which(blank$SubFrac %in% wrongsubfract), "CrwnCl"], c("BBD", "CUS", "DD"))
blank[which(blank$CrwnCl %in% setdiff(blank[which(blank$SubFrac %in% wrongsubfract), "CrwnCl"], c("BBD", "CUS", "DD"))),]
#setting working directory - must change to location of data on users computer!
setwd("C:/Users/edeegan/OneDrive - DOI/Fire_project/Fire_project/")
#loading libraries
library(tidyverse)
library(ggrepel)
library(ordinal)
library(pals)
library(egg)
#clearing environment - fresh start!
rm(list = ls())
#reading in cover data - must change to location of data on users computer!
cover=read.csv("SAGU_data/PSME/PSME_Cover - Species Composition (metric)_XPT.csv", na.strings=c("","NA"))
#formatting date column
cover$Date=as.Date(cover$Date, format="%m/%d/%Y")
#creating new column for just year
cover$Year=str_split_i(cover$Date, "-", 1)
#uv1 describes category, filtering for most common herbaceous species
common_species=cover[which(cover$UV1=="Most Common Herbaceous Species"),]
#counting species for each year and creating new data frame for results
species_summary=common_species %>% group_by(Year) %>% count(Species.Symbol)
species_summary=species_summary[-which(species_summary$Species.Symbol=="XXXX"),]
#counting number of times a species was recorded for each year to calculate percentages
species_summary <- species_summary %>%
group_by(Year) %>%
mutate(total = sum(n)) %>%
ungroup()
#calculating species percentage of total for each year
species_summary <- species_summary %>% group_by(Species.Symbol) %>%
mutate(percent = round(n/total*100, 1))
#renaming species code to common name - CHANGE FOR LOCAL SPECIES
species_summary=species_summary %>%
mutate(Species.Symbol = recode(Species.Symbol,
'ARLA1' = 'Sandwort',
'BRCI1' = 'Fringed Brome',
'CAGE1' = 'White Mountain Sedge',
'CHEI1' = 'Lipfern',
'COCO1' = 'Coulters Horseweed',
'KOMA1' = 'Mountain Junegrass',
'OXAL1' = 'Wood Sorrel',
'PTAQ1' = 'Bracken Fern',
'SCPA1' = 'Figwort',
'COCA1' = 'Canadian Horseweed',
'COUM1' = 'Bastard Toadflax',
'GNAP1' = 'Cudweed',
'HODU1' = 'Mountain Spray',
'PIFI1' = 'Pinyon Rice Grass',
'AGHE1' = 'Fragrant Snakeroot',
'CHGR1' = 'Fetid Goosefoot',
'GALI1' = 'Common Bedstraw',
'GRAS1' = 'Unknown Grass',
'POFE1' = 'Fendler Bluegrass',
'SYOR1' = 'Mountain Snowberry',
'RONE1'= 'New Mexican Locust',
'FORB1'= 'Unknown Forb'))
#classifying as grass or forb
species_summary=species_summary %>%
mutate(Veg_type = recode(Species.Symbol,
'Sandwort' = 'Forb',
'Fringed Brome' = 'Grass',
'White Mountain Sedge' = 'Grass',
'Lipfern' = 'Forb',
'Coulters Horseweed' = 'Forb',
'Mountain Junegrass' = 'Grass',
'Wood Sorrel' ='Forb',
'Bracken Fern' = 'Forb',
'Figwort'= 'Forb',
'Canadian Horseweed'= 'Forb',
'Bastard Toadflax'= 'Forb',
'Cudweed'= 'Forb',
'Mountain Spray'= 'Forb',
'Pinyon Rice Grass' = 'Grass',
'Fragrant Snakeroot'= 'Forb',
'Fetid Goosefoot'= 'Forb',
'Common Bedstraw'= 'Forb',
'Unknown Grass' = 'Grass',
'Fendler Bluegrass' = 'Grass',
'Mountain Snowberry'= 'Forb',
'New Mexican Locust'= 'Forb',
'Unknown Forb'= 'Forb'))
ggplot(species_summary, aes(x="", y=percent, fill=Species.Symbol)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)+
facet_wrap(~Year)+
geom_text(aes(label = paste(percent, "%")), size=2,
position = position_stack(vjust=0.5)) +
labs(x = NULL, y = NULL, fill = NULL)+theme_bw()+scale_fill_manual(values=as.vector(alphabet(22)))+
labs(title = "PSME plots most common herbaceous species")+ #change this to reflect monitoring type
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
#saving plot in PSME plot folder - change to desired location on computer
ggsave("C:/Users/edeegan/OneDrive - DOI/FFIanalysis/Analysis/PSME_Plots/most_common_species.png", width=10, height=4)
#uv1 describes category, filtering for Canopy Cover Class data
canopy=cover[which(cover$UV1=="Canopy Cover Class"),]
#calculating average canopy cover for each year and creating new data frame with results
canopy_summary=canopy %>% group_by(Year) %>% summarize(average=mean(Cover))
#plotting average canopy cover in bar graph - doesn't show distribution well
canopy_summary %>% ggplot(aes(Year, average))+geom_col()+ylab("Average Canopy Cover")+theme_classic()
#saving average canopy cover plot in PSME folder - change to desired location on computer
ggsave("C:/Users/edeegan/OneDrive - DOI/FFIanalysis/Analysis/PSME_Plots/canopy_cover_summary.png")
#plotting canopy cover distribution in a jitter and boxplot - shows distribution better
canopy %>% ggplot(aes(Year, Cover, fill=Year))+geom_boxplot()+geom_jitter()+theme_classic()+ylab("Canopy Cover")
#saving canopy cover boxplot in PSME folder - change to desired location on computer
ggsave("C:/Users/edeegan/OneDrive - DOI/FFIanalysis/Analysis/PSME_Plots/canopy_cover_jitter.png")
#ploting canopy cover count per plot and year, with a different color for each plot
canopy %>% ggplot(aes(Cover, fill=MacroPlot.Name))+geom_histogram()+
facet_wrap(~Year)+theme_classic()+
scale_fill_manual(values=as.vector(ocean.haline(10)))
#saving canopy cover by plot graph - change to desired location on computer
ggsave("C:/Users/edeegan/OneDrive - DOI/FFIanalysis/Analysis/PSME_Plots/canopy_cover_byplot.png")
#running an anova to see if there is a significant difference between years for canopy cover
anova(lm(Cover ~ factor(Year), data = canopy))
#cutting out 2004 to compare - no data exists in 2004 for most common herbaceous species in PSME plots
canopy_2=canopy[-which(canopy$Year=='2004'),]
#plotting canopy boxplot plot and saving as canopy_graph
canopy_graph=canopy_2 %>% ggplot(aes(Year, Cover, fill=Year))+geom_boxplot()+geom_jitter()+theme_classic()+ylab("Canopy Cover")
ggplot(species_summary, aes(fill=Veg_type, x=Year)) +
geom_bar(position="stack", stat="count")+theme_classic()
canopy_species_comparison=ggarrange(stackedbarplot, canopy_graph)
# stacked bar plot of veg type forb vs grass count by year
stackedbarplot=ggplot(species_summary, aes(fill=Veg_type, x=Year)) +
geom_bar(position="stack", stat="count")+theme_classic()
canopy_species_comparison=ggarrange(stackedbarplot, canopy_graph)
#counting for each year for percentages
grassvforb=species_summary %>% group_by(Year) %>% count(Veg_type)
grassvforb <- grassvforb %>%
group_by(Year) %>%
mutate(total = sum(n)) %>%
ungroup()
#calculating percentage of total for each year
grassvforb <- grassvforb %>% group_by(Veg_type) %>%
mutate(percent = round(n/total*100, 1))
# Grouped
stackedbarplot_percent=ggplot(grassvforb, aes(fill=Veg_type, x=Year, y=percent)) +
geom_bar(position="stack", stat="identity")+theme_classic()
stackedbarplot_percent
ggarrange(stackedbarplot_percent, canopy_graph)
grassvforb=grassvforb %>%
mutate(average_canopy_cover = recode(Year,
'2008'=as.numeric(canopy_summary[which(canopy_summary$Year=='2008'),"average"]),
'2013'=as.numeric(canopy_summary[which(canopy_summary$Year=='2013'),"average"]),
'2023'=as.numeric(canopy_summary[which(canopy_summary$Year=='2023'),"average"])))
#rereading in cover data
cover=read.csv("SAGU_data/PSME/PSME_Cover - Species Composition (metric)_XPT.csv", na.strings=c("","NA"))
#formatting date column
cover$Date=as.Date(cover$Date, format="%m/%d/%Y")
#creating new column for just year
cover$Year=str_split_i(cover$Date, "-", 1)
#uv1 describes category, filtering for additional species
additional_species=cover[which(cover$UV1=="Additional Species"),]
#removing XXXX species
additional_species=additional_species[-which(additional_species$Species.Symbol=="XXXX"),]
#counting observations by year and plot
additional_species=additional_species %>% group_by(Year, MacroPlot.Name) %>% count()
ggplot(additional_species, aes(x=Year, y=n, fill=MacroPlot.Name))+
geom_histogram(stat="identity")+ylab("Number of Additional Species recorded")
#uv1 describes category
invasive_species=cover[which(cover$UV1=="Invasive Species"),]
#removing XXXX species
invasive_species=invasive_species[-which(invasive_species$Species.Symbol=="XXXX"),]
#counting observations by year and plot
invasive_species=invasive_species %>% group_by(Year, MacroPlot.Name) %>% count()
#plotting number of invasive species recorded each year and coloring by plot
ggplot(invasive_species, aes(x=Year, y=n, fill=MacroPlot.Name))+
geom_histogram(stat="identity")+ylab("Number of invasive Species recorded")
